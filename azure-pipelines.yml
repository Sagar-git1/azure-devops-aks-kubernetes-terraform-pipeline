# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

stages:
  - stage: TerraformValidate
    jobs:
      - job: TerraformValidateJob
        continueOnError: false
        steps:
        - task: PublishPipelineArtifact@1
          displayName: publish artifacts
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            artifact: 'terraform-manifest-artifact'
            publishLocation: 'pipeline'
        - task: TerraformInstaller@2
          displayName: terraform install
          inputs:
            terraformVersion: 'latest'
        
        - task: TerraformCLI@2
          displayName: terraform init task
          inputs:
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            backendType: 'azurerm'
            backendServiceArm: 'terraform-aks-azurerm-svc-con1'
            ensureBackend: true
            backendAzureRmResourceGroupName: 'terraform-storage-rg1'
            backendAzureRmResourceGroupLocation: 'Central US'
            backendAzureRmStorageAccountName: 'varunterraformstorageo'
            backendAzureRmContainerName: 'tfstates'
            backendAzureRmKey: 'aks-base.tfstate'
            allowTelemetryCollection: false
            
        - task: TerraformCLI@2
          displayName: terraform validate stage
          inputs:
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            allowTelemetryCollection: false